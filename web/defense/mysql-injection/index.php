<?php
echo "<h1>SQLi Tests</h1>";
echo "<h2>0. MySQL-DB Setup</h2>";
echo "Setting up the database for SQLi-Tests";
echo '<pre>
> CREATE DATABASE testdb;
> CREATE USER test@\'%\' IDENTIFIED BY \'password\';
> GRANT ALL ON testdb.* TO test@\'%\';
> FLUSH PRIVILEGES;

> CREATE TABLE IF NOT EXISTS actors (
    id INT AUTO_INCREMENT,
    firstname VARCHAR(255) NOT NULL,
	lastname VARCHAR(255) NOT NULL,
    PRIMARY KEY (id)
)  ENGINE=INNODB;

> INSERT INTO testdb.actors (firstname,lastname) VALUES ("Bill","O\'Reilly");
> INSERT INTO testdb.actors (firstname,lastname) VALUES ("George","Clooney");
> INSERT INTO testdb.actors (firstname,lastname) VALUES ("Tom","Cruise");
</pre>';


// MySQL Connection Setup
try {
	$conn = new PDO('mysql:host=localhost;dbname=testdb', "test", "password");
} catch(PDOException $ex) {
    echo "An Error occured!";
}

/* ----------------------RAW--------------------- */
echo "<h2>1. PDO Raw Query (unsafe)</h2>";
echo "<h3>1.1 Working example in PHP</h3>";
echo "A working example of a valid and expected input for the raw query.";

// Input Variablen
$input = "Cruise";						// Original Input

echo "<pre>
Query: query(\"SELECT firstname FROM testdb.actors WHERE lastname='\$input';\")
[*] \$input: $input</pre>";

// MySQL Statement & Ausgabe
$stmt=$conn->query("SELECT firstname FROM testdb.actors WHERE lastname='$input';");
$row = $stmt->fetch();
echo "<pre>Result: $row[0]</pre>";

echo "<h3>1.2 Working SQL-Injection in PHP</h3>";
echo "A working example of a working but malicious input for the raw query.";
// Input Variablen
$input = "' UNION SELECT version()#";	// SQLi-Query

echo "<pre>
Query: query(\"SELECT firstname FROM testdb.actors WHERE lastname='\$input';\")
[*] \$input: $input</pre>";

// MySQL Statement & Ausgabe
$stmt=$conn->query("SELECT firstname FROM testdb.actors WHERE lastname='$input';");
$row = $stmt->fetch();
echo "<pre>Result: $row[0]</pre>";


/* ---------------------QUOTE-------------------- */
echo "<h2>2. PDO Quote (safe)</h2>";
echo "<h3>2.1 Working example in PHP</h3>";
echo "A working example of a valid and expected, but quoted (escaped) input for the query.";
// Input Variablen
$input="Cruise";
$_input = $conn->quote($input);

echo "<pre>
Query: query(\"SELECT firstname FROM testdb.actors WHERE lastname=\$_lastname;\")
[*] Input: $input
[*] Escaped: $_input
</pre>";

// MySQL Statement & Ausgabe
$stmt=$conn->query("SELECT firstname FROM testdb.actors WHERE lastname=$_input;");
$row = $stmt->fetch();
echo "<pre>Result: $row[0]</pre>";

echo "<h3>2.2 Failed SQL-Injection in PHP</h3>";
echo "A failed example of a malicious, but quoted (escaped) input for the query.";
// Input Variablen
$input="'Cruise' UNION SELECT version()";	// SQLi payload
$_input = $conn->quote($input);

echo "<pre>
Query: query(\"SELECT firstname FROM testdb.actors WHERE lastname=\$_input;\")
[x] Input: $input
[x] Escaped: $_input
</pre>";

// MySQL Statement & Ausgabe
$stmt=$conn->query("SELECT firstname FROM testdb.actors WHERE lastname=$_input;");
$row = $stmt->fetch();
echo "<pre>Result: $row[0]</pre>";

/* ---------------STORED-PROCEDURE--------------- */
echo "<h2>3. PDO Stored Procedures (Safe)</h2>";
echo "<h3>3.1 Preparations</h3>";
echo "Setup of a simple but secure stored procedure.";
echo "<pre>
> DELIMITER //
CREATE PROCEDURE getLastname
(IN actor VARCHAR(255))
BEGIN
  SELECT firstname FROM actors
  WHERE lastname = actor;
END //

> DELIMITER ;
</pre>";
echo "<h3>3.2 Testing</h3>";
echo "Working with good input.";
echo "<pre>
> call getLastname(\"Cruise\");
+-----------+
| Firstname |
+-----------+
| Tom       |
+-----------+</pre>";
echo "Failing with bad input.";
echo "<pre>
> call getLastname('Cruise or 1=1');
Empty set (0.00 sec)

Query OK, 0 rows affected (0.00 sec)</pre>";

echo "<h3>3.3 Working example in PHP</h3>";
echo "Working example of the secure stored procedure via PHP.";

// Input Variablen
$input="Cruise";

echo "<pre>
Query: CALL getLastnameDynamic('\$input');
[*] Stored Procedure: $input
</pre>";

// MySQL Statement & Ausgabe
$stmt=$conn->query("CALL getLastname('$input')");
$row = $stmt->fetch();
echo "<pre>Result: $row[0]</pre>";

echo "<h3>3.4 Failed SQL-Injection in PHP</h3>";
echo "A failed example of a malicious input in a secure stored procedure.";

// Input Variablen
$input="Cruise or 1=1";	// SQLi-Query #1

echo "<pre>
Query: CALL getLastnameDynamic('\$input');
[*] Stored Procedure: $input
</pre>";

// MySQL Statement & Ausgabe
$stmt=$conn->query("CALL getLastname('$input')");
$row = $stmt->fetch();
echo "<pre>Result: $row[0]</pre>";

echo "<h2>3. PDO Dynamic Stored Procedures (Unsafe)</h2>";
echo "<h3>3.1 Preperations</h3>";
echo "A vulnerable example with dynamically built SQL queries in a stored procedure.";
echo "<pre>
> delimiter // 
> CREATE PROCEDURE getLastnameDynamic(IN actor VARCHAR(255))
BEGIN
    SET @s = CONCAT('SELECT firstname FROM testdb.actors WHERE lastname=\"',actor,'\"' );
    PREPARE stmt FROM @s;
    EXECUTE stmt;
    DEALLOCATE PREPARE stmt;
END
//
> delimiter ;

> call getLastnameDynamic('Cruise');
+-----------+
| firstname |
+-----------+
| Tom       |
+-----------+
</pre>";
echo "<h3>3.2 Testing</h3>";
echo "An SQL-Injection example within the mysql shell";
echo "<pre>
> call getLastnameDynamic('Cruise\" or \"1\"=\"1');
+-----------+
| firstname |
+-----------+
| Bill      |
| George    |
| Tom       |
+-----------+
3 rows in set (0.00 sec)

Query OK, 0 rows affected (0.00 sec)
 </pre>";
echo "<h3>3.3 Working example with good input</h3>";
// Input Variablen
$input='Cruise';

echo "<pre>
Query: CALL getLastnameDynamic('\$input');
[*] Dynamic Stored Procedure: $input</pre>";

// MySQL Statement & Ausgabe
$stmt=$conn->query("CALL getLastnameDynamic('$input')");
$row = $stmt->fetch();
echo "<pre>Result: $row[0]</pre>";

echo "<h3>3.4 SQL-Injection in dynamic stored procedure #1</h3>";
// Input Variablen
$input='Cruise" or "1"="1';	// SQLi-Query #1

echo "<pre>
Query: CALL getLastnameDynamic('\$input');
[*] Dynamic Stored Procedure: $input</pre>";

// MySQL Statement & Ausgabe
$stmt=$conn->query("CALL getLastnameDynamic('$input')");
echo "<pre>";
while ($row = $stmt->fetch()) {
	echo("Result: $row[0]<br>");
}
echo "</pre>";
echo "<h3>3.5 SQL-Injection in dynamic stored procedure #2</h3>";
// Input Variablen
$input='Cruise" UNION SELECT version()#';	// SQLi-Query #2

echo "<pre>
Query: CALL getLastnameDynamic('\$input');
[*] Dynamic Stored Procedure: $input</pre>";

// MySQL Statement & Ausgabe
$stmt=$conn->query("CALL getLastnameDynamic('$input')");
$row = $stmt->fetch();
echo "<pre>Result: $row[0]</pre>";

/* --------------PREPARED-STATEMENT-------------- */

echo "<h2>4. PDO Prepared Statements (safe)</h2>";
echo "<h3>4.1 Statements with named variables</h3>";

// Input Variablen
$input="Cruise";
echo "<pre>
Query: \$conn->prepare(\"SELECT firstname FROM testdb.actors where lastname = :name\")
Param: \$stmt->bindParam(:name, \$input);
[*] Input: $input
</pre>";

// MySQL Statement & Ausgabe
$stmt = $conn->prepare("SELECT firstname FROM testdb.actors where lastname = :name");
$stmt->bindParam(':name', $input);
$stmt->execute();
$row = $stmt->fetch();
echo("<pre>Result: $row[0]</pre>");

echo "<h3>4.2 Statements with indexed variables</h3>";
// Input Variablen
$input="Cruise";
echo "<pre>
Query: \$conn->prepare(\"SELECT firstname FROM testdb.actors where lastname = ?\")
Param: \$stmt->bindParam(1, \$input);
[*] Input: $input
</pre>";

// MySQL Statement & Ausgabe
$stmt = $conn->prepare("SELECT firstname FROM testdb.actors where lastname = ?");
$stmt->bindParam(1, $input);
$stmt->execute();
$row = $stmt->fetch();
echo("<pre>Result: $row[0]</pre>");

echo "<h3>4.3 Failed SQL-Injection in prepared statement</h3>";
// Input Variablen
$input="Cruise or 1=1";
echo "<pre>
Query: \$conn->prepare(\"SELECT firstname FROM testdb.actors where lastname = ?\")
Param: \$stmt->bindParam(1, \$input);
[*] Input: $input
</pre>";

// MySQL Statement & Ausgabe
$stmt = $conn->prepare("SELECT firstname FROM testdb.actors where lastname = ?");
$stmt->bindParam(1, $input);
$stmt->execute();
$row = $stmt->fetch();
echo("<pre>Result: $row[0]</pre>");


?>
